"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0).hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),$state.go("authentication.signin",{},{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess","authentication.signin",{},toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)}})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("auxthera"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("forms"),ApplicationConfiguration.registerModule("patients"),ApplicationConfiguration.registerModule("petOwners"),ApplicationConfiguration.registerModule("practices"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("auxthera").controller("auxtheraController",["$scope","$state","$http","$window","Authentication","$location","$stateParams","ActivePatient",function($scope,$state,$http,$window,Authentication,$location,$stateParams,ActivePatient){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.error=$location.search().err,$scope.signup=function(){console.log($scope.credentials),$http.post("/api/auth/signup",$scope.credentials).success(function(response){console.log(response),$state.reload()}).error(function(response){$scope.error=response.message})}}]),angular.module("auxthera").factory("FeedbackService",["$resource",function($resource){return $resource("/api/auxthera/feedback/:feedbackId",{feedbackId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",views:{content:{template:"<div ui-view></div>",controller:["$state","Authentication",function($state,Authentication){"admin"==Authentication.user.roles?$state.go("auxOverview"):"user"==Authentication.user.roles?$state.go("vetHomepage"):$state.go("signin")}]}}}).state("not-found",{url:"/not-found",views:{content:{templateUrl:"modules/core/views/404.client.view.html"}}}).state("overview",{url:"/overview",views:{sidebar:{templateUrl:"/modules/core/views/sidebar.client.view.html"},content:{templateUrl:"modules/patients/views/overview.client.view.html"}},data:{roles:["user"]}}).state("progressForms",{url:"/progressForms",views:{sidebar:{templateUrl:"/modules/core/views/sidebar.client.view.html"},content:{templateUrl:"modules/forms/views/progressForms.client.view.html"}},data:{roles:["user"]}}).state("enrollmentForm",{url:"/enrollmentForm",views:{sidebar:{templateUrl:"/modules/core/views/sidebar.client.view.html"},content:{templateUrl:"modules/forms/views/enrollmentForm.client.view.html"}},data:{roles:["user"]}}).state("vetFeedback",{url:"/vetFeedback",views:{sidebar:{templateUrl:"/modules/core/views/sidebar.client.view.html"},content:{templateUrl:"modules/forms/views/feedbackForm.client.view.html"}},data:{roles:["user"]}}).state("exitForm",{url:"/exitForm",views:{sidebar:{templateUrl:"/modules/core/views/sidebar.client.view.html"},content:{templateUrl:"modules/forms/views/exitForm.client.view.html"}},data:{roles:["user"]}}).state("vetHomepage",{url:"/vetHome",views:{content:{templateUrl:"modules/practices/views/vetHomepage.client.view.html"}},data:{roles:["user"]}}).state("settings",{"abstract":!0,url:"/settings",views:{content:{templateUrl:"modules/users/views/settings/settings.client.view.html"}},data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",views:{content:{templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}}}).state("settings.password",{url:"/password",views:{content:{templateUrl:"modules/users/views/settings/change-password.client.view.html"}}}).state("settings.accounts",{url:"/accounts",views:{content:{templateUrl:"modules/users/views/settings/manage-social-accounts.client.view.html"}}}).state("settings.picture",{url:"/picture",views:{content:{templateUrl:"modules/users/views/settings/change-profile-picture.client.view.html"}}}).state("signup",{url:"/signup",views:{sidebar:{templateUrl:"/modules/core/views/auxSidebar.client.view.html"},content:{templateUrl:"modules/users/views/authentication/signup.client.view.html"}},data:{roles:["admin"]}}).state("signin",{url:"/signin?err",views:{content:{templateUrl:"modules/users/views/authentication/signin.client.view.html"}}}).state("forgot",{url:"/forgot",views:{content:{templateUrl:"modules/users/views/password/forgot-password.client.view.html"}}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",views:{content:{templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}}}).state("password.reset.success",{url:"/success",views:{content:{templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}}}).state("password.reset.form",{url:"/:token",views:{content:{templateUrl:"modules/users/views/password/reset-password.client.view.html"}}}).state("auxOverview",{url:"/auxOverview",views:{sidebar:{templateUrl:"/modules/core/views/auxSidebar.client.view.html"},content:{templateUrl:"modules/auxthera/views/auxOverview.client.view.html"}},data:{roles:["admin"]}}).state("auxFeedback",{url:"/auxFeedback",views:{sidebar:{templateUrl:"/modules/core/views/auxSidebar.client.view.html"},content:{templateUrl:"modules/auxthera/views/auxFeedback.client.view.html"}},data:{roles:["admin"]}}).state("auxCallList",{url:"/auxCallList",views:{sidebar:{templateUrl:"/modules/core/views/auxSidebar.client.view.html"},content:{templateUrl:"modules/auxthera/views/auxCallList.client.view.html"}},data:{roles:["admin"]}}).state("auxUpdates",{url:"/auxUpdates",views:{sidebar:{templateUrl:"/modules/core/views/auxSidebar.client.view.html"},content:{templateUrl:"modules/auxthera/views/auxUpdates.client.view.html"}},data:{roles:["admin"]}})}]),angular.module("core").controller("HeaderController",["$scope","$location",function($scope,$location){$scope.isActive=function(viewLocation){return viewLocation===$location.path()}}]),angular.module("core").controller("HomeController",["$scope","Authentication","$location",function($scope,Authentication,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/")}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].roles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.link,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].items[itemIndex].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{isPublic:!1})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("forms").controller("enrollmentFormController",["$scope","Authentication","$location","$stateParams","EnrollmentFormsService","PatientsService","PracticesService","ActivePatient",function($scope,Authentication,$location,$stateParams,EnrollmentFormsService,PatientsService,PracticesService,ActivePatient){$scope.authentication=Authentication,console.log($scope.authentication),$scope.authentication.user||($location.path("/"),console.log($scope.authentication)),$scope.activePatient=ActivePatient.getActivePatient(),$scope.practiceInfo={preferredUnit:"kg"},$scope.firstName=$scope.activePatient.firstName,$scope.patientId=$scope.activePatient.patientId,$scope.birthDate=$scope.activePatient.birthDate,$scope.startWeight=$scope.activePatient.startWeight,$scope.sex=$scope.activePatient.sex,$scope.fixed=$scope.activePatient.fixed,$scope.breed=$scope.activePatient.breed,$scope.bcs=$scope.activePatient.bcs,$scope.firstName?$scope.disableInput=!0:$scope.disableInput=!1,console.log("birthDate: "+$scope.birthDate),$scope.editForm=function(){$scope.disableInput=!1},$scope.cancelEdit=function(){$scope.disableInput=!0};var today=new Date,month=today.getMonth(),day=today.getDate(),year=today.getFullYear();today=new Date(year,month,day),$scope.todayDate=today,$scope.initPatient=function(){$scope.activePatient=ActivePatient.getActivePatient()},$scope.createEnrollmentForm=function(){var patient=new PatientsService({dateCreated:$scope.todayDate,firstName:this.firstName,patientId:this.patientId,birthDate:this.birthDate,sex:this.sex,fixed:this.fixed,breed:this.breed,startWeight:this.startWeight,bcs:this.bcs,practice:ActivePatient.getActivePractice()._id}),enrollmentForm=new EnrollmentFormsService({treats:this.treats,currentMedications:this.currentMedications,medicalHistory:this.medicalHistory,peFindings:this.peFindings,techId:this.techId,vetId:this.vetId});patient.$save(function(patientResponse){ActivePatient.setActivePatient(patientResponse);var practice=new PracticesService({_id:ActivePatient.getActivePractice()._id,newPatient:patientResponse._id});practice.$update(function(updatePracticeResponse){ActivePatient.updateActivePractice()}),enrollmentForm.patient=patientResponse._id,enrollmentForm.$save(function(enrollmentFormResponse){patient=new PatientsService({_id:patientResponse._id,enrollmentForm:enrollmentFormResponse._id,formSave:!0}),patient.$update(function(patientAddFormResponse){ActivePatient.setPatientNeedsUpdate(),$location.path("/overview")})})})},$scope.patientInfo={DOB:new Date(2013,9,22)},$scope.patientInfo.age=function(){if(void 0!==$scope.birthDate){var DOB=$scope.birthDate,age=$scope.yearDifference({year:DOB.getFullYear(),month:DOB.getMonth()+1,day:DOB.getDate()});return age}return null},$scope.patientInfo.idealWeight=function(){var currWeight,bodyFat,idealWeight;return $scope.disableInput?(currWeight=$scope.activePatient.startWeight,bodyFat=5*$scope.activePatient.bcs,idealWeight=currWeight*(100-bodyFat)/100/.8,"kg"===$scope.practiceInfo.preferredUnit?idealWeight.toFixed(2):(2.20462*idealWeight).toFixed(2)):(currWeight=$scope.startWeight,bodyFat=5*$scope.bcs,idealWeight=currWeight*(100-bodyFat)/100/.8,"kg"===$scope.practiceInfo.preferredUnit?idealWeight.toFixed(2):(2.20462*idealWeight).toFixed(2))},$scope.patientInfo.cupsPerFeeding=function(){var dailykCalIdealWeight=600,kCalPerCup=150,cupsPerDay=dailykCalIdealWeight/kCalPerCup,perDay=$scope.patientInfo.perDay,cupsPerFeeding=cupsPerDay/perDay;return cupsPerFeeding.toFixed(2)},$scope.yearDifference=function(date){var curDate=new Date,now={year:curDate.getUTCFullYear(),month:curDate.getUTCMonth()+1,day:curDate.getUTCDate()},diff=now.year%date.year;return(now.month<date.month||now.month===date.month&&now.day<date.day)&&(diff-=1),diff}}]),angular.module("forms").controller("exitFormController",["$scope","Authentication","$location","$stateParams","ExitFormsService","PatientsService","ActivePatient",function($scope,Authentication,$location,$stateParams,ExitFormsService,PatientsService,ActivePatient){$scope.authentication=Authentication,$scope.activePatient=ActivePatient.getActivePatient(),$scope.practiceInfo={preferredUnit:"kg"},console.log($scope.authentication),$scope.authentication.user||($location.path("/"),console.log($scope.authentication)),$scope.createExitForm=function(){var exitForm=new ExitFormsService({patient:ActivePatient.getActivePatient()._id,endingReason:this.endingReason,finalWeight:this.finalWeight,finalBCS:this.finalBCS,techId:this.techId,vetId:this.vetId});exitForm.$save(function(exitFormResponse){var patient=new PatientsService({_id:ActivePatient.getActivePatient()._id,exitForm:exitFormResponse._id,formSave:!0});patient.$update(function(patientAddFormResponse){ActivePatient.setPatientNeedsUpdate(),$location.path("/overview")})})};var today=new Date,month=today.getMonth(),day=today.getDate(),year=today.getFullYear();today=new Date(year,month,day),$scope.endingDate=today,$scope.patientInfo={startBCS:$scope.activePatient.bcs},$scope.patientInfo.startWeight=function(){return"kg"===$scope.practiceInfo.preferredUnit?$scope.activePatient.startWeight:(2.20462*$scope.activePatient.startWeight).toFixed(2)},$scope.patientInfo.weightLossTotal=function(){var startWeight=$scope.activePatient.startWeight,finalWeight=$scope.finalWeight;return"kg"===$scope.practiceInfo.preferredUnit?(startWeight-finalWeight).toFixed(2):(2.20462*startWeight-finalWeight).toFixed(2)}}]),angular.module("forms").controller("progressFormsController",["$scope","$location","Authentication","ProgressFormsService","ActivePatient","PatientsService",function($scope,$location,Authentication,ProgressFormsService,ActivePatient,PatientsService){$scope.authentication=Authentication,$scope.oneAtTime=!0,$scope.enterFood=!1,$scope.feedAdjustFlag=!1,$scope.weight={lb:"",kg:""},$scope.constProgForm=[],$scope.authentication.user||$location.path("/"),$scope.initPatient=function(){$scope.activePatient=ActivePatient.getActivePatient(),$scope.formsLocked=$scope.formsLockedFromEditing(),$scope.todayFormSubmitFlag=!1;var today=new Date,lstForm=$scope.toDate($scope.activePatient.progressForms[$scope.activePatient.progressForms.length-1].dateCreated);today.getFullYear()===lstForm.getFullYear()&&today.getMonth()===lstForm.getMonth()&&today.getDate()===lstForm.getDate()&&($scope.todayFormSubmitFlag=!0);var i;for(i=0;i!==$scope.activePatient.progressForms.length;++i)$scope.constProgForm[i]=$scope.activePatient.progressForms[i],$scope.activePatient.progressForms[i].index=i,$scope.activePatient.progressForms[i].trimDose=$scope.getTrimauxilDose($scope.activePatient.progressForms[i].weight),$scope.activePatient.progressForms[i].edit=!1,$scope.activePatient.progressForms[i].feedAdjustmentFlag=!1,$scope.activePatient.progressForms[i].foodChangedFlag=!1,$scope.activePatient.progressForms[i].weightKg=$scope.activePatient.progressForms[i].weight,$scope.activePatient.progressForms[i].weightLb=$scope.kgToLb($scope.activePatient.progressForms[i].weight),$scope.activePatient.progressForms[i].oldTrimauxilUse=$scope.activePatient.progressForms[i].trimauxilUse,$scope.activePatient.progressForms[i].oldfoodChanged=$scope.activePatient.progressForms[i].foodChanged,$scope.activePatient.progressForms[i].oldComments=$scope.activePatient.progressForms[i].comments,$scope.activePatient.progressForms[i].oldoverrideCupsPerFeeding=$scope.activePatient.progressForms[i].overrideCupsPerFeeding,$scope.activePatient.progressForms[i].oldvetID=$scope.activePatient.progressForms[i].vetID,$scope.activePatient.progressForms[i].oldtechID=$scope.activePatient.progressForms[i].techID,console.log($scope.activePatient.progressForms[i].weight)},$scope.createProgressForm=function(){console.log("create p form");var progressForm=new ProgressFormsService({weight:this.weight.kg,trimauxilUse:this.trimauxilUse,weightLossAppropriate:this.weightLossAppropriate,foodChanged:this.foodChanged,comments:this.comments,techID:this.techID,vetID:this.vetID,patient:ActivePatient.getActivePatient()._id});progressForm.$save(function(progressFormResponse){console.log("saved p form");var patient=new PatientsService({_id:ActivePatient.getActivePatient()._id,newProgressForm:progressFormResponse._id,formSave:!0});patient.$update(function(patientAddFormResponse){ActivePatient.setPatientNeedsUpdate(),$location.path("/overview")})})},$scope.updateProgressForm=function(index){console.log("Update Progress Form");var fieldChanged={},changeMadeFlag=!1,progressFormUpdate=new ProgressFormsService({_id:ActivePatient.getActivePatient().progressForms[index]._id});this.activePatient.progressForms[index].weightKg!==this.activePatient.progressForms[index].weight&&(fieldChanged.weight=this.activePatient.progressForms[index].weight,progressFormUpdate.weight=this.activePatient.progressForms[index].weightKg,changeMadeFlag=!0,this.activePatient.progressForms[index].weight=this.activePatient.progressForms[index].weightKg),this.activePatient.progressForms[index].oldTrimauxilUse!==this.activePatient.progressForms[index].trimauxilUse&&(fieldChanged.trimauxilUse=this.activePatient.progressForms[index].oldTrimauxilUse,progressFormUpdate.trimauxilUse=this.activePatient.progressForms[index].trimauxilUse,changeMadeFlag=!0,this.activePatient.progressForms[index].oldTrimauxilUse=this.activePatient.progressForms[index].trimauxilUse),this.activePatient.progressForms[index].oldfoodChanged!==this.activePatient.progressForms[index].foodChanged&&(fieldChanged.foodChanged=this.activePatient.progressForms[index].foodChanged),this.activePatient.progressForms[index].oldComments!==this.activePatient.progressForms[index].comments&&(fieldChanged.comments=this.activePatient.progressForms[index].oldComments,progressFormUpdate.comments=this.activePatient.progressForms[index].comments,changeMadeFlag=!0,this.activePatient.progressForms[index].oldComments=this.activePatient.progressForms[index].comments),this.activePatient.progressForms[index].oldtechID!==this.activePatient.progressForms[index].techID&&(fieldChanged.techID=this.activePatient.progressForms[index].oldtechID,progressFormUpdate.techID=this.activePatient.progressForms[index].techID,changeMadeFlag=!0,this.activePatient.progressForms[index].oldtechID=this.activePatient.progressForms.techID),this.activePatient.progressForms[index].oldvetID!==this.activePatient.progressForms[index].vetID&&(fieldChanged.vetID=this.activePatient.progressForms[index].oldvetID,progressFormUpdate.vetID=this.activePatient.progressForms[index].vetID,changeMadeFlag=!0,this.activePatient.progressForms[index].vetID=this.activePatient.progressForms[index].oldvetID),changeMadeFlag===!0&&(progressFormUpdate.changedData=fieldChanged),console.log("***************"),console.log(fieldChanged),this.activePatient.progressForms[index].edit=!1},$scope.lbToKg=function(lbWeight){return(lbWeight/2.2046).toFixed(2)},$scope.kgToLb=function(kgWeight){return(2.2046*kgWeight).toFixed(2)},$scope.getLastWeight=function(index){var pat=ActivePatient.getActivePatient();return 0!==pat.progressForms.length?-1===index?pat.progressForms[pat.progressForms.length-1].weight:0===index?pat.startWeight:pat.progressForms[index-1].weight:-1===index?pat.startWeight:0},$scope.getTodayWeightLoss=function(todayWeight,index){var pat=ActivePatient.getActivePatient();return 0===pat.progressForms.length?pat.startWeight-todayWeight:-1===index?pat.progressForms[pat.progressForms.length-1].weight-todayWeight:0===index?pat.startWeight-pat.progressForms[index].weight:pat.progressForms[index-1].weight-pat.progressForms[index].weight},$scope.toDate=function(strDate){var tmp=new Date,year=parseInt(strDate.substring(0,4)),month=parseInt(strDate.substring(5,7))-1,day=parseInt(strDate.substring(8,10));return tmp.setFullYear(year),tmp.setMonth(month),tmp.setDate(day),tmp},$scope.formsLockedFromEditing=function(){var pat=ActivePatient.getActivePatient();if(void 0!==pat.exitForm){var today=Date(),exitDate=$scope.toDate(pat.exitForm.dateCreated);if($scope.getNumDays(exitDate,today))return!0}return!1},$scope.getNumDays=function(firstDate,secondDate){var oneDay=864e5,strtDate=$scope.toDate(firstDate),endDate=$scope.toDate(secondDate);return Math.round(Math.abs((strtDate.getTime()-endDate.getTime())/oneDay))},$scope.getAvgWeightLossPerWeek=function(){var res=0,pat=ActivePatient.getActivePatient();if(0===pat.progressForms.length)return 0;var strtDate=pat.progressForms[0].dateCreated,endDate=pat.progressForms[pat.progressForms.length-1].dateCreated,numWeeks=$scope.getNumDays(strtDate,endDate)/7,weightLoss=pat.progressForms[0].weight-pat.progressForms[pat.progressForms.length-1].weight;return res=0===numWeeks?weightLoss/pat.startWeight/1:weightLoss/pat.startWeight/numWeeks,res.toFixed(2)},$scope.getPercentWeightLoss=function(){console.log("Kinderley"),console.log(this.index),console.log(this.weight.kg)},$scope.getTrimauxilDose=function(weight){var trimauxilDose="";return weight>4&&10>=weight?trimauxilDose="S1":weight>10&&21>=weight?trimauxilDose="S2":weight>21&&33>=weight?trimauxilDose="M1":weight>33&&55>=weight?trimauxilDose="M2":weight>55&&95>=weight?trimauxilDose="L1":weight>95&&140>=weight?trimauxilDose="L2":weight>140&&233>=weight&&(trimauxilDose="L3"),trimauxilDose},$scope.editForm=function(index){$scope.formsLocked?this.activePatient.progressForms[index].edit=!1:this.activePatient.progressForms[index].edit=!0},$scope.cancelEditing=function(index){this.activePatient.progressForms[index].edit=!1,this.activePatient.progressForms[index].weightKg=this.activePatient.progressForms[index].weight,this.activePatient.progressForms[index].weightLb=$scope.kgToLb(this.activePatient.progressForms[index].weight),this.activePatient.progressForms[index].trimauxilUse=this.activePatient.progressForms[index].oldTrimauxilUse,this.activePatient.progressForms[index].foodChanged=this.activePatient.progressForms[index].oldfoodChanged,this.activePatient.progressForms[index].comments=this.activePatient.progressForms[index].oldComments}}]),angular.module("forms").factory("ProgressFormsService",["$resource",function($resource){return $resource("/api/forms/progressForm/:progressFormId",{progressFormId:"@_id"},{update:{method:"PUT"}})}]),angular.module("forms").factory("EnrollmentFormsService",["$resource",function($resource){return $resource("/api/forms/enrollmentForm/:enrollmentFormId",{enrollmentFormId:"@_id"},{update:{method:"PUT"}})}]),angular.module("forms").factory("ExitFormsService",["$resource",function($resource){return $resource("/api/forms/exitForm/:exitFormId",{exitFormId:"@_id"},{update:{method:"PUT"}})}]),angular.module("patients",["chart.js"]).controller("patientsController",["$scope","Authentication","$location","$stateParams","PatientsService","ActivePatient",function($scope,Authentication,$location,$stateParams,PatientsService,ActivePatient){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.activePatient=ActivePatient.getActivePatient();var progressForms=$scope.activePatient.progressForms,monthStarted=Number($scope.activePatient.dateCreated.substring(5,7)),months=["January","February","March","April","May","June","July","August","September","October","November","December"],idealWeights=[100,95,90,85,80,75,70,65,60,55,50,45,40,35,30,25,20,15,10,5],monthsShown=[],weightsShown=[],idealWeightsShown=[];monthsShown.push(months[monthStarted-1]),weightsShown.push($scope.activePatient.startWeight),idealWeightsShown.push(idealWeights[0]);for(var i=0;i<progressForms.length;i++)monthsShown.push(months[Number(progressForms[i].dateCreated.substring(5,7))-1]),weightsShown.push(progressForms[i].weight),idealWeightsShown.push(idealWeights[i+1]);$scope.labelsLine=monthsShown,$scope.colorsLine=["#6399CC","#505050"],$scope.seriesLine=["Current Weight","Ideal Weight"],$scope.dataLine=[weightsShown,idealWeightsShown],$scope.weight=$scope.activePatient.startWeight,$scope.activePatient.progressForms.length&&($scope.weight=$scope.activePatient.progressForms[$scope.activePatient.progressForms.length-1].weight),$scope.trimauxilSKU=function(){return $scope.weight>=5&&$scope.weight<=10?"S1":$scope.weight>=11&&$scope.weight<=21?"S2":$scope.weight>=22&&$scope.weight<=33?"M1":$scope.weight>=34&&$scope.weight<=55?"M2":$scope.weight>=56&&$scope.weight<=95?"L1":$scope.weight>=96&&$scope.weight<=140?"L2":$scope.weight>=141&&$scope.weight<=233?"L3":void 0},$scope.imageURL="modules/patients/img/"+$scope.trimauxilSKU()+".png",$scope.idealWeight=function(){var currWeight=$scope.activePatient.startWeight,bodyFat=5*$scope.activePatient.bcs,idealWeight=currWeight*(100-bodyFat)/100/.8;return idealWeight.toFixed(2)},$scope.labelsDoughnut=["Total Weight Lost","Pounds To Go"],$scope.dataDoughnut=[($scope.activePatient.startWeight-$scope.weight).toFixed(2),($scope.weight-$scope.idealWeight()).toFixed(2)],$scope.colorsDoughnut=["#6399CC","#505050"]}]),angular.module("patients").service("ActivePatient",["PatientsService","PracticesService",function(PatientsService,PracticesService){var activePatient={},patientNeedsUpdate=!1,activePractice={},practiceNeedsUpdate=!1;return{setActivePatient:function(patientToSet){return activePatient=patientToSet},getActivePatient:function(){if(!patientNeedsUpdate)return activePatient;patientNeedsUpdate=!1;var patient=new PatientsService({_id:activePatient._id,populateForms:!0});patient.$get(function(updateActivePatientResponse){return activePatient=updateActivePatientResponse})},setPatientNeedsUpdate:function(){patientNeedsUpdate=!0},updateActivePatient:function(){var patient=new PatientsService({_id:activePatient._id,populateForms:!0});patient.$get(function(updateActivePatientResponse){return activePatient=updateActivePatientResponse,patientNeedsUpdate=!1,console.log("update done: "+activePatient.firstName),activePatient})},setActivePractice:function(practiceToSet){return activePractice=practiceToSet},getActivePractice:function(){if(!practiceNeedsUpdate)return activePractice;var practice=new PracticesService({_id:activePractice._id});practice.$get(function(updateActivePracticeResponse){return activePractice=updateActivePracticeResponse,practiceNeedsUpdate=!1,activePractice})},setPracticeNeedsUpdate:function(){practiceNeedsUpdate=!0},updateActivePractice:function(){var practice=new PracticesService({_id:activePractice._id});practice.$get(function(updateActivePracticeResponse){return activePractice=updateActivePracticeResponse,practiceNeedsUpdate=!1,activePractice})}}}]),angular.module("patients").factory("PatientsService",["$resource",function($resource){return $resource("/api/patients/:patientId",{patientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("petOwners").controller("petOwnersController",["$scope","Authentication","$location","$stateParams","ActivePatient",function($scope,Authentication,$location,$stateParams,ActivePatient){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/")}]),angular.module("petOwners").factory("PetOwnersService",["$resource",function($resource){return $resource("/api/petOwners/:petOwnerId",{petOwnerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("practices").controller("practicesController",["$scope","Authentication","PracticesService","PatientsService","FeedbackService","$location","$stateParams","$window","ActivePatient",function($scope,Authentication,PracticesService,PatientsService,FeedbackService,$location,$stateParams,$window,ActivePatient){function searchFilter(item){for(var i=0;i<$scope.keysToSearch.length;i++)if(item.hasOwnProperty($scope.keysToSearch[i])&&item[$scope.keysToSearch[i]].toLowerCase().indexOf($scope.search.toLowerCase())>-1)return!0;return!1}$scope.patients=ActivePatient.getActivePractice().patients,$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.activePatientsList=[],$scope.activePatientsFiltered=[],$scope.keysToSearch=["patientId","firstName"],$scope.sortBy="",$scope.search="",$scope.changeSort=function(sortRequest){$scope.sortBy===sortRequest?$scope.sortBy="-"+sortRequest:$scope.sortBy==="-"+sortRequest?$scope.sortBy="":$scope.sortBy=sortRequest,setTimeout(function(){$(".headerTableContainer").height($(".patientListTableHead").height());
},20)},$scope.newPatientClick=function(){ActivePatient.setActivePatient({}),$location.path("/enrollmentForm")},$scope.selectPatient=function(selectedPatient){var patient=new PatientsService({_id:selectedPatient._id,populateForms:!0});patient.$get(function(selectActivePatientResponse){ActivePatient.setActivePatient(selectActivePatientResponse),$location.path("/overview")})},$scope.initPractice=function(){var practice=new PracticesService({_id:"5639a8f129e356c349ff1934"});$scope.getPracticePromise=practice.$get(function(practiceResponse){ActivePatient.setActivePractice(practiceResponse),$scope.patients=practiceResponse.patients,console.log("APc: "+JSON.stringify(ActivePatient.getActivePractice(),null,4)),ActivePatient.setPatientNeedsUpdate(),console.log("APt: "+JSON.stringify(ActivePatient.getActivePatient(),null,4));for(var i=0;i<practiceResponse.patients.length;i++)void 0===practiceResponse.patients[i].exitForm&&$scope.activePatientsList.push(practiceResponse.patients[i]);$scope.activePatientsFiltered=$scope.activePatientsList,$(".tableContainer").mCustomScrollbar({scrollbarPosition:"outside",callbacks:{}}),$(".headerTableContainer").height($(".patientListTableHead").height())})},$scope.searchChange=function(){$scope.activePatientsFiltered=$scope.activePatientsList,$scope.activePatientsFiltered=$scope.activePatientsFiltered.filter(searchFilter),$(".headerTableContainer").height($(".patientListTableHead").height())},$scope.newFeedback=function(){var feedback=new FeedbackService({messages:[{message:this.message}],patient:ActivePatient.getActivePatient()._id,practice:ActivePatient.getActivePractice()._id,company:"5650077a8038b1a6d2e24bac"});feedback.$save(function(feedbackResponse){})};var window=angular.element($window);window.bind("resize",function(){console.log("resize"),$(".headerTableContainer").height($(".patientListTableHead").height())})}]),angular.module("practices").filter("dateFormat",["$filter",function($filter){return function(input){return null===input?"":$filter("date")(new Date(input),"dd MMM yyyy")}}]),angular.module("practices").factory("PracticesService",["$resource",function($resource){return $resource("/api/practices/:practiceId",{practiceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/views/admin/user-list.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/views/admin/user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/views/admin/user-edit.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(){var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){console.log($scope.credentials),$http.post("/api/auth/signup",$scope.credentials).success(function(response){console.log(response),$state.reload()}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go("home")}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){var redirect_to;$state.previous&&(redirect_to=$state.previous.href),$window.location.href=url+(redirect_to?"?redirect_to="+encodeURIComponent(redirect_to):"")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);